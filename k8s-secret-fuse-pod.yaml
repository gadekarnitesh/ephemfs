apiVersion: v1
kind: Pod
metadata:
  name: secret-fuse-demo
  labels:
    app: secret-fuse-demo
spec:
  # Shared volume for secrets
  volumes:
  - name: secrets-fuse-mnt
    emptyDir: {}
  
  containers:
  # Main application container
  - name: app
    image: alpine:3.18
    command: ["sh", "-c"]
    args:
    - |
      echo "Main application started"
      echo "Waiting for secrets to be available..."
      
      # Wait for secrets to be mounted
      while [ ! -f /mnt/secrets/database_password ]; do
        echo "Waiting for secrets filesystem..."
        sleep 2
      done
      
      echo "Secrets are now available!"
      echo "Available secrets:"
      ls -la /mnt/secrets/
      echo ""
      
      echo "Reading secrets:"
      echo "Database password: $(cat /mnt/secrets/database_password)"
      echo "API Key: $(cat /mnt/secrets/api_key)"
      echo "JWT Secret: $(cat /mnt/secrets/jwt_secret)"
      echo ""
      
      echo "Config file content:"
      cat /mnt/secrets/config.json
      echo ""
      
      echo "Application running with secrets..."
      sleep infinity
    volumeMounts:
    - name: secrets-fuse-mnt
      mountPath: /mnt/secrets
      readOnly: true
    resources:
      requests:
        memory: "64Mi"
        cpu: "50m"
      limits:
        memory: "128Mi"
        cpu: "100m"
  
  # Secret FUSE sidecar container
  - name: secret-fuse
    image: ghcr.io/yourorg/secret-fuse:latest  # Replace with your registry
    env:
    - name: FUSE_MOUNTPOINT
      value: "/mnt/secrets"
    # Demo secrets via environment variables
    - name: DATABASE_PASSWORD
      value: "k8s_production_db_password_789"
    - name: API_KEY
      value: "sk-k8s-prod-xyz789abc123"
    - name: JWT_SECRET
      value: "k8s-jwt-secret-key-2024-production"
    - name: REDIS_PASSWORD
      value: "k8s_redis_prod_password_456"
    # Vault token from Kubernetes secret
    - name: VAULT_TOKEN
      valueFrom:
        secretKeyRef:
          name: vault-token
          key: token
          optional: true
    # External secret fetching configuration
    - name: SECRETFS_URLS
      value: "https://vault.example.com/v1/secret/data/myapp"
    - name: SECRETFS_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: vault-token
          key: token
          optional: true
    - name: SECRETFS_FETCHER_TYPE
      value: "http"
    - name: SECRETFS_TIMEOUT_SECONDS
      value: "30"
    - name: SECRETFS_HEADERS
      value: "X-Vault-Namespace:production,Content-Type:application/json"
    # Encryption configuration
    - name: SECRETFS_CIPHER_TYPE
      value: "default"
    - name: SECRETFS_ENCRYPTION_KEY
      valueFrom:
        secretKeyRef:
          name: encryption-key
          key: key
          optional: true
    # Custom secrets
    - name: SECRET_STRIPE_KEY
      value: "sk_live_k8s_stripe_key_example"
    - name: SECRET_SENDGRID_API_KEY
      value: "SG.k8s_sendgrid_api_key_example"
    - name: CONFIG_JSON
      value: |
        {
          "env": "kubernetes",
          "debug": false,
          "database": {
            "host": "k8s-db.example.com",
            "port": 5432,
            "username": "k8s_app_user"
          },
          "cache": {
            "redis_url": "redis://k8s-cache.example.com:6379"
          },
          "features": {
            "debug": false,
            "metrics": true,
            "kubernetes": true
          }
        }
    securityContext:
      privileged: false
      capabilities:
        add: ["SYS_ADMIN"]
      runAsUser: 1000
      runAsGroup: 1000
    volumeMounts:
    - name: secrets-fuse-mnt
      mountPath: /mnt/secrets
      mountPropagation: Bidirectional
    devices:
    - hostPath: /dev/fuse
      devicePath: /dev/fuse
    resources:
      requests:
        memory: "32Mi"
        cpu: "25m"
      limits:
        memory: "64Mi"
        cpu: "50m"
    livenessProbe:
      exec:
        command:
        - test
        - -f
        - /mnt/secrets/database_password
      initialDelaySeconds: 10
      periodSeconds: 30
    readinessProbe:
      exec:
        command:
        - test
        - -f
        - /mnt/secrets/database_password
      initialDelaySeconds: 5
      periodSeconds: 10
  
  restartPolicy: Always
  
---
# Optional: Kubernetes Secret for Vault token
apiVersion: v1
kind: Secret
metadata:
  name: vault-token
type: Opaque
data:
  # Base64 encoded vault token: echo -n "hvs.CAESIJ1234567890abcdef" | base64
  token: aHZzLkNBRVNJSjEyMzQ1Njc4OTBhYmNkZWY=

---
# Optional: Kubernetes Secret for encryption key
apiVersion: v1
kind: Secret
metadata:
  name: encryption-key
type: Opaque
data:
  # Base64 encoded encryption key: echo -n "my-secure-encryption-key-2024" | base64
  key: bXktc2VjdXJlLWVuY3J5cHRpb24ta2V5LTIwMjQ=
